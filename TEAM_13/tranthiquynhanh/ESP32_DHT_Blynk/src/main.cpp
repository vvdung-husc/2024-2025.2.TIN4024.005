#include <Arduino.h>
#include <TM1637Display.h>

#define BLYNK_TEMPLATE_ID "TMPL6p5PEAxZE"
#define BLYNK_TEMPLATE_NAME "Blynk DHT"
#define BLYNK_AUTH_TOKEN "2q23K58TEgWhL-dgSHygbEB_OmY7NHMr"

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>

/* Th√¥ng tin k·∫øt n·ªëi WiFi */
char ssid[] = "Wokwi-GUEST";  
char pass[] = "";            

// Ch√¢n k·∫øt n·ªëi ph·∫ßn c·ª©ng
#define BTN_PIN  23  // N√∫t nh·∫•n
#define LED_PIN  21  // LED xanh
#define CLK 18       // TM1637 CLK
#define DIO 19       // TM1637 DIO
#define DHT_PIN 16   // C·∫£m bi·∫øn DHT22
#define DHT_TYPE DHT22  

// Bi·∫øn to√†n c·ª•c
ulong currentMillis = 0;
bool ledState = true;

// Kh·ªüi t·∫°o module
TM1637Display display(CLK, DIO);
DHT dht(DHT_PIN, DHT_TYPE);

bool isReady(ulong &lastTime, uint32_t interval);
void handleButton();
void updateUptime();
void updateTemperatureHumidity();

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  pinMode(BTN_PIN, INPUT_PULLUP);
  
  display.setBrightness(0x0f);
  dht.begin();

  Serial.print("ƒêang k·∫øt n·ªëi WiFi: ");
  Serial.println(ssid);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass); 

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i!");
  } else {
    Serial.println("‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
  }
  
  digitalWrite(LED_PIN, ledState ? HIGH : LOW);
  Blynk.virtualWrite(V1, ledState);
}

void loop() {  
  Blynk.run();  // Duy tr√¨ k·∫øt n·ªëi v·ªõi Blynk

  currentMillis = millis();
  updateUptime();
  handleButton();
  updateTemperatureHumidity();
}

// H·∫°n ch·∫ø spam t√≠n hi·ªáu
bool isReady(ulong &lastTime, uint32_t interval) {
  if (currentMillis - lastTime < interval) return false;
  lastTime = currentMillis;
  return true;
}

// X·ª≠ l√Ω n√∫t nh·∫•n
void handleButton() {
  static ulong lastPress = 0;
  static int lastState = HIGH;
  if (!isReady(lastPress, 50)) return;
  
  int buttonState = digitalRead(BTN_PIN);
  if (buttonState == lastState) return;
  lastState = buttonState;
  if (buttonState == LOW) return;

  ledState = !ledState;
  digitalWrite(LED_PIN, ledState ? HIGH : LOW);
  Blynk.virtualWrite(V1, ledState);

  if (!ledState) {
    display.clear();
  }
}

// Hi·ªÉn th·ªã th·ªùi gian ch·∫°y
void updateUptime() {
  static ulong lastUpdate = 0;
  if (!isReady(lastUpdate, 1000)) return;

  ulong seconds = currentMillis / 1000;  
  Blynk.virtualWrite(V0, seconds);
  
  if (ledState) {
    display.showNumberDec(seconds);
  }
}


void updateTemperatureHumidity() {
  static ulong lastUpdate = 0;
  if (!isReady(lastUpdate, 2000)) return;

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();
  
  if (!isnan(temp) && !isnan(hum)) {
    Blynk.virtualWrite(V2, temp);  // G·ª≠i nhi·ªát ƒë·ªô l√™n Blynk
    Blynk.virtualWrite(V3, hum);   // G·ª≠i ƒë·ªô ·∫©m l√™n Blynk

    Serial.print("üå° Nhi·ªát ƒë·ªô: ");
    Serial.print(temp);
    Serial.print(" ¬∞C | üíß ƒê·ªô ·∫©m: ");
    Serial.print(hum);
    Serial.println(" %");
  } else {
    Serial.println("‚ö†Ô∏è L·ªói ƒë·ªçc c·∫£m bi·∫øn DHT22! Th·ª≠ l·∫°i...");
  }
}

// ƒêi·ªÅu khi·ªÉn LED t·ª´ Blynk
BLYNK_WRITE(V1) { 
  ledState = param.asInt();
  digitalWrite(LED_PIN, ledState ? HIGH : LOW);
  if (!ledState) {
    display.clear();
  }
}
