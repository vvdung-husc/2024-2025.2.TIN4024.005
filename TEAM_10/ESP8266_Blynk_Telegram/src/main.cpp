#include <Arduino.h>
#include "utils.h"
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <Wire.h>
#include <U8g2lib.h>

// L√™ VƒÉn Minh To√†n config
// #define BLYNK_TEMPLATE_ID "TMPL6J5vyJ-Sx"
// #define BLYNK_TEMPLATE_NAME "8266Project"
// #define BLYNK_AUTH_TOKEN "vh8uS_cSevS3c-lhJ3SA_hpkaHIhjDTY"
// #define BLYNK_AUTH_TOKEN "KvjwSKBaTdKY_5HIcugiNpTHfJ8cU86X"
// #define BOT_TOKEN "7472915762:AAG6Pol5VV1yNYh-NfU295aDKScjwkut2CQ"
// #define TELEGRAM_GROUP_ID "-4603839699" 

// Phan Thanh To√†n
// #define BLYNK_TEMPLATE_ID "TMPL6UtUU_5WZ"
// #define BLYNK_TEMPLATE_NAME "ESP8266Project"
// #define BLYNK_AUTH_TOKEN "p_B7I5wU_xTCi3owpkhbeklgLbr7r-8R"
// #define BOT_TOKEN "7499637616:AAGVz985ubbTrkQlWYRrJMTNC70be_QVP7k"
// #define TELEGRAM_GROUP_ID "-4698442702"

// L√™ Tr·ªçng T√πng L√¢m
// #define BLYNK_TEMPLATE_ID "TMPL61OYx_d4N"
// #define BLYNK_TEMPLATE_NAME "ESP8266blynkbottelegram"
// #define BLYNK_AUTH_TOKEN "6nbBw_6ai4_UZ60oPZYrB5NBoSzTOqvn"
// #define BOT_TOKEN "7813666133:AAGlXB9w4ZkrJ6jP5h7VYiQgzcX36xf4bBM"
// #define TELEGRAM_GROUP_ID "-4698442702"

// Nguy·ªÖn VƒÉn Ho√†ng Nam
#define BLYNK_TEMPLATE_ID "TMPL6aruMTIqM"
#define BLYNK_TEMPLATE_NAME "Esp8266 Project Blynk Telegram bot"
#define BLYNK_AUTH_TOKEN "aJmjzlwxzsxlSF6AIEl-9So-gM1H6rw_"
#define BOT_TOKEN "7499637616:AAGVz985ubbTrkQlWYRrJMTNC70be_QVP7k"
#define TELEGRAM_GROUP_ID "-4698442702"

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

#define LED_GREEN 15
#define LED_YELLOW 2  
#define LED_RED 5 

#define SENSOR_PIN 16
#define SENSOR_TYPE DHT11 

#define OLED_SDA_PIN 13
#define OLED_SCL_PIN 12   

U8G2_SH1106_128X64_NONAME_F_HW_I2C oled(U8G2_R0, /* reset=*/U8X8_PIN_NONE);

DHT dht(SENSOR_PIN, SENSOR_TYPE);
// char wifiSSID[] = "Workwi-guest";
// char wifiPASS[] = "";

char ssid[] = "CNTT-MMT";
char pass[] = "13572468";

// WiFiClientSecure secureClient;
// UniversalTelegramBot telegramBot(BOT_TOKEN, secureClient);

WiFiClientSecure client;
UniversalTelegramBot telegramBot(BOT_TOKEN, client);

// H√†m ki·ªÉm tra th·ªùi gian hi·ªÉn th·ªã m√†n h√¨nh ch√†o m·ª´ng
bool DisplayWelcomeTimeout(unsigned long timeoutMS = 5000) 
{
  static unsigned long lastTime = 0;

  static bool done = false;
  if (done) 
    return true;
  if (!IsReady(lastTime, timeoutMS)) 
    return false;
  done = true;
  return done;
}

int currentState = 0;           // Tr·∫°ng th√°i hi·ªán t·∫°i: 0 - Xanh, 1 - V√†ng, 2 - ƒê·ªè
unsigned long previousMillis = 0; // Th·ªùi gian tr∆∞·ªõc ƒë√≥ (d√πng ƒë·ªÉ t√≠nh th·ªùi gian)
unsigned long remainingTime = 0;  // Th·ªùi gian c√≤n l·∫°i c·ªßa tr·∫°ng th√°i hi·ªán t·∫°i
unsigned long greenTime = 15000;  
unsigned long yellowTime = 2000;  
unsigned long redTime = 5000;     
bool BlinkYellow = false;     // Ch·∫ø ƒë·ªô nh·∫•p nh√°y ƒë√®n v√†ng
bool trafficOff = false;          // C·ªù ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i ƒë√®n giao th√¥ng
bool trafficOffByTelegram = false; // C·ªù ƒë·ªÉ ki·ªÉm tra xem ƒë√®n b·ªã t·∫Øt b·ªüi Telegram hay kh√¥ng

float randomFloat(float min, float max) {
  return min + (float)random(0, 1000) / 1000.0 * (max - min);
}

bool IsReady(unsigned long &lastTime, unsigned long interval) {
  unsigned long currentTime = millis();
  if (currentTime - lastTime >= interval) {
    lastTime = currentTime;
    return true;
  }
  return false;
}

void setup() 
{
  Serial.begin(115200);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);
  pinMode(LED_RED, OUTPUT);

  digitalWrite(LED_GREEN, HIGH);
  digitalWrite(LED_YELLOW, LOW);
  digitalWrite(LED_RED, LOW);

  dht.begin();

  Wire.begin(OLED_SDA_PIN, OLED_SCL_PIN);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  client.setInsecure();

  if (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("‚ùå WiFi connection failed!");
  }
  else
  {
    Serial.println("‚úÖ WiFi connected!");
  }
  Blynk.virtualWrite(V3, BlinkYellow);
  oled.begin();
  oled.clearBuffer();

  oled.setFont(u8g2_font_unifont_t_vietnamese1);
  oled.drawUTF8(0, 14, "Tr∆∞·ªùng ƒêHKH");
  oled.drawUTF8(0, 28, "Khoa CNTT");
  oled.drawUTF8(0, 42, "L·∫≠p tr√¨nh IoT");

  oled.sendBuffer();
  client.setInsecure(); // B·ªè qua ki·ªÉm tra ch·ª©ng ch·ªâ SSL cho ESP8266

  

  // K·∫øt n·ªëi v·ªõi Blynk
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  previousMillis = millis();  // Kh·ªüi t·∫°o th·ªùi gian ban ƒë·∫ßu
  remainingTime = greenTime;  // Kh·ªüi t·∫°o th·ªùi gian c√≤n l·∫°i

  randomSeed(analogRead(0));
  telegramBot.sendMessage(TELEGRAM_GROUP_ID, "ESP8266 ƒë√£ kh·ªüi ƒë·ªông!", "");
}

void CycleTrafficLights() 
{
  if (BlinkYellow || trafficOff) return; // Kh√¥ng ch·∫°y n·∫øu ·ªü ch·∫ø ƒë·ªô nh·∫•p nh√°y ho·∫∑c ƒë√®n b·ªã t·∫Øt

  unsigned long currentLight = millis();
  unsigned long interval = (currentState == 0) ? greenTime : (currentState == 1) ? yellowTime : redTime;

  // T√≠nh th·ªùi gian c√≤n l·∫°i
  remainingTime = interval - (currentLight - previousMillis);

  if (currentLight - previousMillis >= interval) {
    previousMillis = currentLight;
    digitalWrite(LED_RED, LOW);
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_YELLOW, LOW);

    switch (currentState) {
      case 0:  // Xanh -> V√†ng
        digitalWrite(LED_YELLOW, HIGH);
        currentState = 1;
        break;
      case 1:  // V√†ng -> ƒê·ªè
        digitalWrite(LED_RED, HIGH);
        currentState = 2;
        break;
      case 2:  // ƒê·ªè -> Xanh
        digitalWrite(LED_GREEN, HIGH);
        currentState = 0;
        break;
    }
    remainingTime = interval;  // ƒê·∫∑t l·∫°i th·ªùi gian c√≤n l·∫°i khi chuy·ªÉn tr·∫°ng th√°i
    Serial.print("[TRAFFIC] ");
    Serial.println(currentState == 0 ? "Xanh" : currentState == 1 ? "Vang" : "Do");
  }
}

float humidityVal = 0.0;
float temperatureVal = 0.0;

void ReadSensorData() 
{
  static unsigned long lastTime = 0;
  if (!IsReady(lastTime, 10000)) 
    return;

  float humidity = randomFloat(0.0, 100.0);
  float temperature = randomFloat(-40.0, 80.0);
  


  bool shouldUpdate = false;
  String message = "C·∫≠p nh·∫≠t d·ªØ li·ªáu:\n";

  if (temperatureVal != temperature) 
  {
    shouldUpdate = true;
    temperatureVal = temperature;
    Serial.print("Nhiet do: ");
    Serial.print(temperature);
    Serial.println(" *C");
    Blynk.virtualWrite(V1, temperature);
    message += "üî• Nhi·ªát ƒë·ªô: " + String(temperatureVal, 1) + "¬∞C\n";
  }

  if (humidityVal != humidity) 
  {
    shouldUpdate = true;
    humidityVal = humidity;
    Serial.print("Do am: ");
    Serial.print(humidity);
    Serial.println(" %\t");
    Blynk.virtualWrite(V2, humidityVal);
    message += "üí¶ ƒê·ªô ·∫©m: " + String(humidityVal, 1) + "%\n";
  }
  if (shouldUpdate) 
  {
    if (temperatureVal < 10) {
      message += "üî• C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô qu√° th·∫•p (" + String(temperatureVal) + "¬∞C)! Nguy c∆° h·∫° th√¢n nhi·ªát, t√™ c√≥ng, gi·∫£m mi·ªÖn d·ªãch.\n";
    } else if (temperatureVal >= 10 && temperatureVal <= 15) {
      message += "üî• C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô th·∫•p (" + String(temperatureVal) + "¬∞C)! C·∫£m gi√°c l·∫°nh, tƒÉng nguy c∆° m·∫Øc b·ªánh ƒë∆∞·ªùng h√¥ h·∫•p.\n";
    } else if (temperatureVal > 25 && temperatureVal <= 30) {
      message += "üî• Nhi·ªát ƒë·ªô b√¨nh th∆∞·ªùng (" + String(temperatureVal) + "¬∞C)! Nhi·ªát ƒë·ªô l√Ω t∆∞·ªüng, √≠t ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe.\n";
    } else if (temperatureVal > 30 && temperatureVal <= 35) {
      message += "üî• C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô cao (" + String(temperatureVal) + "¬∞C)! C∆° th·ªÉ c√≥ d·∫•u hi·ªáu m·∫•t n∆∞·ªõc, m·ªát m·ªèi.\n";
    } else if (temperatureVal > 35 && temperatureVal <= 40) {
      message += "üî• C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô r·∫•t cao (" + String(temperatureVal) + "¬∞C)! Nguy c∆° s·ªëc nhi·ªát, chu·ªôt r√∫t, say n·∫Øng.\n";
    } else if (temperatureVal > 40) {
      message += "üî• C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô c·ª±c k·ª≥ nguy hi·ªÉm (" + String(temperatureVal) + "¬∞C)! Nguy c∆° suy n·ªôi t·∫°ng, ƒë·ªôt qu·ªµ nhi·ªát.\n";
    }
    if (humidityVal < 30) {
      message += "üí¶ C·∫¢NH B√ÅO: ƒê·ªô ·∫©m qu√° th·∫•p (" + String(humidityVal) + "%)! Da kh√¥, k√≠ch ·ª©ng m·∫Øt, tƒÉng nguy c∆° m·∫Øc b·ªánh v·ªÅ h√¥ h·∫•p.\n";
    } else if (humidityVal >= 40 && humidityVal <= 60) {
      message += "üí¶ƒê·ªô ·∫©m b√¨nh th∆∞·ªùng (" + String(humidityVal) + "%)! M·ª©c l√Ω t∆∞·ªüng, √≠t ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe.\n";
    } else if (humidityVal > 70 && humidityVal <= 80) {
      message += "üí¶ C·∫¢NH B√ÅO: ƒê·ªô ·∫©m cao (" + String(humidityVal) + "%)! TƒÉng nguy c∆° n·∫•m m·ªëc, vi khu·∫©n ph√°t tri·ªÉn, g√¢y b·ªánh ƒë∆∞·ªùng h√¥ h·∫•p.\n";
    } else if (humidityVal > 80) {
      message += "üí¶ C·∫¢NH B√ÅO: ƒê·ªô ·∫©m r·∫•t cao (" + String(humidityVal) + "%)! Oi b·ª©c, kh√≥ th·ªü, tƒÉng nguy c∆° s·ªëc nhi·ªát.\n";
    }

    telegramBot.sendMessage(TELEGRAM_GROUP_ID, message, "");
  }
}
void BlinkYellowMode() 
{ 
  static bool yellowBlink = false;
  static unsigned long lastBlinkTime = 0;
  if (!BlinkYellow || trafficOff) 
    return;
  if (!IsReady(lastBlinkTime, 1000)) 
    return;
  yellowBlink = !yellowBlink;
  digitalWrite(LED_YELLOW, yellowBlink ? HIGH : LOW);

  
  digitalWrite(LED_GREEN, LOW);
  digitalWrite(LED_RED, LOW);
}

void UpdateUptimeBlynk() 
{
  static unsigned long lastTime = 0;
  if (!IsReady(lastTime, 1000)) 
    return;
  oled.clearBuffer();
  oled.setFont(u8g2_font_unifont_t_vietnamese2);
  String s;

  // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√®n giao th√¥ng
  if (trafficOff) {
    s = "Den tat(Tele)";
    s = "Den vang"; // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ·ªü ch·∫ø ƒë·ªô nh·∫•p nh√°y
  } else {
    int elapsedTime = remainingTime / 1000; // T√≠nh th·ªùi gian c√≤n l·∫°i (gi√¢y)
    if (currentState == 0) s = "Den xanh: " + String(elapsedTime) + "s";
    else if (currentState == 1) s = "Den vang: " + String(elapsedTime) + "s";
    else s = "Den do: " + String(elapsedTime) + "s";
    // G·ª≠i th·ªùi gian ƒë·∫øm ng∆∞·ª£c l√™n Blynk V0
    Blynk.virtualWrite(V0, elapsedTime);
  }
  oled.drawUTF8(0, 12, s.c_str());

  // Hi·ªÉn th·ªã nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
  s = "Nhiet do: " + String(temperatureVal, 1) + "C";
  oled.drawUTF8(0, 48, s.c_str());
  s = "Do am: " + String(humidityVal, 1) + "%";
  oled.drawUTF8(0, 60, s.c_str());
  oled.sendBuffer();
}

BLYNK_WRITE(V3) 
{
  BlinkYellow = param.asInt();
  if (!BlinkYellow) {
    digitalWrite(LED_RED, LOW);
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_YELLOW, LOW);
    currentState = 0;  // ƒê·∫∑t l·∫°i tr·∫°ng th√°i v·ªÅ ƒë√®n xanh khi t·∫Øt ch·∫ø ƒë·ªô nh·∫•p nh√°y
    previousMillis = millis();  // ƒê·∫∑t l·∫°i th·ªùi gian
    digitalWrite(LED_GREEN, HIGH);  // B·∫≠t ƒë√®n xanh ngay l·∫≠p t·ª©c
    remainingTime = greenTime;  // ƒê·∫∑t l·∫°i th·ªùi gian c√≤n l·∫°i
    trafficOff = false; // B·∫≠t l·∫°i ƒë√®n giao th√¥ng n·∫øu ƒëang b·ªã t·∫Øt
    trafficOffByTelegram = false; // X√≥a ƒë√°nh d·∫•u t·∫Øt b·ªüi Telegram
  }
}

void ProcessTelegramCommands() 
{
  int msgCount = telegramBot.getUpdates(telegramBot.last_message_received + 1);
  if (msgCount == 0)
  return;
  while (msgCount) 
  {
    for (int i = 0; i < msgCount; i++) 
    {
      String command = telegramBot.messages[i].text;
      Serial.println("Received from Telegram: " + command);
      String chat_id = String(telegramBot.messages[i].chat_id);
      

      if (command == "/traffic_off") {
        trafficOff = true;
        trafficOffByTelegram = true;
        digitalWrite(LED_GREEN, LOW);
        digitalWrite(LED_YELLOW, LOW);
        digitalWrite(LED_RED, LOW);
        telegramBot.sendMessage(chat_id, "ƒê√®n giao th√¥ng ƒë√£ ƒë∆∞·ª£c t·∫Øt.", "");
      } else if (command == "/traffic_on") {
        trafficOff = false;
        trafficOffByTelegram = false; // X√≥a ƒë√°nh d·∫•u t·∫Øt b·ªüi Telegram
        currentState = 0; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i v·ªÅ ƒë√®n xanh
        previousMillis = millis();
        digitalWrite(LED_GREEN, HIGH);
        remainingTime = greenTime;
        telegramBot.sendMessage(chat_id, "ƒê√®n giao th√¥ng ƒë√£ ƒë∆∞·ª£c b·∫≠t.", "");
      } else {
        telegramBot.sendMessage(chat_id, "D√πng l·ªánh /traffic_off ƒë·ªÉ t·∫Øt ƒë√®n ho·∫∑c /traffic_on ƒë·ªÉ b·∫≠t ƒë√®n.", "");
      }
    }
    msgCount = telegramBot.getUpdates(telegramBot.last_message_received + 1);
  }
}


// H√†m x·ª≠ l√Ω khi nh·∫≠n gi√° tr·ªã t·ª´ Blynk V4 (th·ªùi gian ƒë√®n xanh)
BLYNK_WRITE(V4) {
  greenTime = param.asInt() * 1000;
  if (greenTime < 1000) greenTime = 1000;
  if (greenTime > 30000) greenTime = 30000;
}

// H√†m x·ª≠ l√Ω khi nh·∫≠n gi√° tr·ªã t·ª´ Blynk V5 (th·ªùi gian ƒë√®n v√†ng)
BLYNK_WRITE(V5) {
  yellowTime = param.asInt() * 1000;
  if (yellowTime < 1000) yellowTime = 1000;
  if (yellowTime > 10000) yellowTime = 10000;
}

// H√†m x·ª≠ l√Ω khi nh·∫≠n gi√° tr·ªã t·ª´ Blynk V6 (th·ªùi gian ƒë√®n ƒë·ªè)
BLYNK_WRITE(V6) {
  redTime = param.asInt() * 1000;
  if (redTime < 1000) redTime = 1000;
  if (redTime > 30000) redTime = 30000;
}

void loop() 
{
  Blynk.run();
  if (!DisplayWelcomeTimeout())
    return;

  CycleTrafficLights(); 
  ReadSensorData();
  UpdateUptimeBlynk();
  BlinkYellowMode(); 
  ProcessTelegramCommands();
}