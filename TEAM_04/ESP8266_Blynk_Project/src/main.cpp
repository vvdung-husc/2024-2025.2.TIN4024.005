// L√ä B√Å NH·∫¨T MINH
#define BLYNK_TEMPLATE_ID "TMPL6N92hnKMZ"
#define BLYNK_TEMPLATE_NAME "ESP8266 Blynk Project"
#define BLYNK_AUTH_TOKEN "JuuTlquqg72SD0zhHGuFA5-eb_vNroz1"

// H·ªí XU√ÇN L√ÉM
// #define BLYNK_TEMPLATE_ID "TMPL6HwO6Vtka"
// #define BLYNK_TEMPLATE_NAME "IOT"
// #define BLYNK_AUTH_TOKEN "Q1P__3piELCWKs22dLh589vQktApTTKJ"

// Nguy·ªÖn Vi·∫øt H√πng
// #define BLYNK_TEMPLATE_ID "TMPL6J1Jal72W"
// #define BLYNK_TEMPLATE_NAME "esp8266"
// #define BLYNK_AUTH_TOKEN "u1cKK2vyD5FCTZ76up_wKqrc3n5LPGg9"

#include <Arduino.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <UniversalTelegramBot.h> // Th√™m th∆∞ vi·ªán Telegram

// L√ä B√Å NH·∫¨T MINH
#define BOTtoken "7965370700:AAGHB_XS6lNgahXM6ZDbEJj-tV4chtwuiBo" // Bot Token t·ª´ BotFather
#define GROUP_ID "-4692915290"                                    // Group ID c·ªßa b·∫°n
// H·ªí XU√ÇN L√ÉM
// #define BOTtoken "7984313333:AAEfM0Yox23-5fuM31lZmYBHe7NY2HsjXxA" // Bot Token t·ª´ BotFather
// #define GROUP_ID "-4692915290"                                    // Group ID c·ªßa b·∫°n

// Nguy·ªÖn Vi·∫øt H√πng
// #define BOTtoken "7520744232:AAHTX360kc_5wuJZuZUmTc2Zs9FqD_Zvg44"
// #define GROUP_ID "-4554634970"

#define gPIN 15 // ƒê√®n xanh
#define yPIN 2  // ƒê√®n v√†ng
#define rPIN 5  // ƒê√®n ƒë·ªè

#define OLED_SDA 13
#define OLED_SCL 12

// Kh·ªüi t·∫°o m√†n h√¨nh OLED SH1106
U8G2_SH1106_128X64_NONAME_F_HW_I2C oled(U8G2_R0, /* reset=*/U8X8_PIN_NONE);

// K·∫øt n·ªëi WiFi
char ssid[] = "CNTT-MMT";
char pass[] = "13572468";

// Kh·ªüi t·∫°o Telegram client
WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

BlynkTimer timer;

// -------------------- Bi·∫øn to√†n c·ª•c --------------------
bool yellowBlinkMode = false;       // Ch·∫ø ƒë·ªô ƒë√®n v√†ng nh·∫•p nh√°y
bool trafficLightOn = true;         // Tr·∫°ng th√°i ƒë√®n giao th√¥ng (true: ho·∫°t ƒë·ªông, false: t·∫Øt)
unsigned long startMillis;          // Th·ªùi gian b·∫Øt ƒë·∫ßu
unsigned long lastTelegramTime = 0; // Th·ªùi gian g·ª≠i th√¥ng b√°o Telegram cu·ªëi c√πng
unsigned long lastBotCheck = 0;     // Th·ªùi gian ki·ªÉm tra tin nh·∫Øn Telegram cu·ªëi c√πng

float fHumidity = 0.0;
float fTemperature = 0.0;

// -------------------- H√†m ki·ªÉm tra th·ªùi gian --------------------
bool IsReady(unsigned long &lastTimer, unsigned long interval)
{
    unsigned long currentMillis = millis();
    if (currentMillis - lastTimer >= interval)
    {
        lastTimer = currentMillis;
        return true;
    }
    return false;
}

// -------------------- H√†m x·ª≠ l√Ω tin nh·∫Øn Telegram --------------------
void handleTelegramMessages()
{
    if (!IsReady(lastBotCheck, 1000)) // Ki·ªÉm tra tin nh·∫Øn m·ªói 1 gi√¢y
        return;

    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages)
    {
        for (int i = 0; i < numNewMessages; i++)
        {
            String chat_id = String(bot.messages[i].chat_id);
            String text = bot.messages[i].text;

            // Ki·ªÉm tra n·∫øu tin nh·∫Øn ƒë·∫øn t·ª´ group ƒë√∫ng
            if (chat_id != GROUP_ID)
                continue;

            // X·ª≠ l√Ω l·ªánh /traffic_off
            if (text == "/traffic_off")
            {
                trafficLightOn = false;
                digitalWrite(gPIN, LOW);
                digitalWrite(yPIN, LOW);
                digitalWrite(rPIN, LOW);
                yellowBlinkMode = false; // T·∫Øt ch·∫ø ƒë·ªô nh·∫•p nh√°y n·∫øu ƒëang b·∫≠t
                bot.sendMessage(GROUP_ID, "üö¶ ƒê√®n giao th√¥ng ƒë√£ ƒë∆∞·ª£c T·∫ÆT!", "");
            }
            // X·ª≠ l√Ω l·ªánh /traffic_on
            else if (text == "/traffic_on")
            {
                trafficLightOn = true;
                bot.sendMessage(GROUP_ID, "üö¶ ƒê√®n giao th√¥ng ƒë√£ ƒë∆∞·ª£c B·∫¨T!", "");
            }
        }
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
}

// -------------------- H√†m g·ª≠i c·∫£nh b√°o qua Telegram --------------------
void sendTelegramAlert()
{
    // Ki·ªÉm tra m·ªói 5 ph√∫t (300000ms)
    if (!IsReady(lastTelegramTime, 300000))
        return;

    // if (!IsReady(lastTelegramTime, 3000))
    //     return;

    String message = "";

    // Ki·ªÉm tra nhi·ªát ƒë·ªô
    if (fTemperature < 10.0)
    {
        message = "‚ö†Ô∏è C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô " + String(fTemperature) + "¬∞C - Nguy c∆° h·∫° th√¢n nhi·ªát, t√™ c√≥ng, gi·∫£m mi·ªÖn d·ªãch!";
    }
    else if (fTemperature >= 10.0 && fTemperature < 15.0)
    {
        message = "‚ö†Ô∏è C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô " + String(fTemperature) + "¬∞C - C·∫£m gi√°c l·∫°nh, tƒÉng nguy c∆° m·∫Øc b·ªánh ƒë∆∞·ªùng h√¥ h·∫•p!";
    }
    else if (fTemperature >= 25.0 && fTemperature <= 30.0)
    {
        message = "‚úÖ Nhi·ªát ƒë·ªô l√Ω t∆∞·ªüng: " + String(fTemperature) + "¬∞C - √çt ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe.";
    }
    else if (fTemperature > 30.0 && fTemperature <= 35.0)
    {
        message = "‚ö†Ô∏è C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô " + String(fTemperature) + "¬∞C - C√≥ th·ªÉ g√¢y m·ªát m·ªèi, m·∫•t n∆∞·ªõc!";
    }
    else if (fTemperature > 35.0 && fTemperature <= 40.0)
    {
        message = "‚ö†Ô∏è C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô " + String(fTemperature) + "¬∞C - Nguy c∆° s·ªëc nhi·ªát, chu·ªôt r√∫t, say n·∫Øng!";
    }
    else if (fTemperature > 40.0)
    {
        message = "üö® C·∫¢NH B√ÅO NGHI√äM TR·ªåNG: Nhi·ªát ƒë·ªô " + String(fTemperature) + "¬∞C - C·ª±c k·ª≥ nguy hi·ªÉm, c√≥ th·ªÉ g√¢y suy n·ªôi t·∫°ng, ƒë·ªôt qu·ªµ nhi·ªát!";
    }

    // Ki·ªÉm tra ƒë·ªô ·∫©m
    if (fHumidity < 30.0)
    {
        message += "\n‚ö†Ô∏è C·∫¢NH B√ÅO: ƒê·ªô ·∫©m " + String(fHumidity) + "% - Da kh√¥, k√≠ch ·ª©ng m·∫Øt, tƒÉng nguy c∆° b·ªánh h√¥ h·∫•p!";
    }
    else if (fHumidity >= 40.0 && fHumidity <= 60.0)
    {
        if (message == "")
        {
            message = "‚úÖ ƒê·ªô ·∫©m l√Ω t∆∞·ªüng: " + String(fHumidity) + "% - √çt ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe.";
        }
        else
        {
            message += "\n‚úÖ ƒê·ªô ·∫©m l√Ω t∆∞·ªüng: " + String(fHumidity) + "% - √çt ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe.";
        }
    }
    else if (fHumidity > 70.0 && fHumidity <= 80.0)
    {
        message += "\n‚ö†Ô∏è C·∫¢NH B√ÅO: ƒê·ªô ·∫©m " + String(fHumidity) + "% - TƒÉng nguy c∆° n·∫•m m·ªëc, vi khu·∫©n ph√°t tri·ªÉn, g√¢y b·ªánh ƒë∆∞·ªùng h√¥ h·∫•p!";
    }
    else if (fHumidity > 80.0)
    {
        message += "\nüö® C·∫¢NH B√ÅO NGHI√äM TR·ªåNG: ƒê·ªô ·∫©m " + String(fHumidity) + "% - Oi b·ª©c, kh√≥ th·ªü, tƒÉng nguy c∆° s·ªëc nhi·ªát!";
    }

    // G·ª≠i tin nh·∫Øn n·∫øu c√≥ c·∫£nh b√°o
    if (message != "")
    {
        bot.sendMessage(GROUP_ID, message, "");
    }
}

// -------------------- H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu --------------------
void updateData()
{
    static unsigned long lastTimer = 0;
    if (!IsReady(lastTimer, 2000))
        return;

    fTemperature = random(-400, 801) / 10.0; // Nhi·ªát ƒë·ªô t·ª´ -40.0¬∞C ƒë·∫øn 80.0¬∞C
    fHumidity = random(0, 1001) / 10.0;      // ƒê·ªô ·∫©m t·ª´ 0.0% ƒë·∫øn 100.0%

    Serial.print("Temperature: ");
    Serial.print(fTemperature);
    Serial.println(" ¬∞C");

    Serial.print("Humidity: ");
    Serial.print(fHumidity);
    Serial.println(" %");

    Blynk.virtualWrite(V1, fTemperature);
    Blynk.virtualWrite(V2, fHumidity);

    oled.clearBuffer();
    oled.setFont(u8g2_font_unifont_t_vietnamese1);
    oled.drawUTF8(0, 14, "Nhi·ªát ƒë·ªô: ");
    oled.setCursor(80, 14);
    oled.print(fTemperature);
    oled.print("C");

    oled.drawUTF8(0, 42, "ƒê·ªô ·∫©m: ");
    oled.setCursor(80, 42);
    oled.print(fHumidity);
    oled.print("%");

    oled.sendBuffer();

    // G·ªçi h√†m g·ª≠i c·∫£nh b√°o Telegram
    sendTelegramAlert();
}

// -------------------- ƒêi·ªÅu khi·ªÉn ƒë√®n LED --------------------
void controlTrafficLights()
{
    static unsigned long lastTimer = 0;
    static int currentLed = 0;
    static const int ledPin[3] = {gPIN, yPIN, rPIN};

    // N·∫øu ƒë√®n giao th√¥ng b·ªã t·∫Øt, kh√¥ng th·ª±c hi·ªán ƒëi·ªÅu khi·ªÉn
    if (!trafficLightOn)
        return;

    if (yellowBlinkMode)
    {
        if (!IsReady(lastTimer, 500))
            return;
        digitalWrite(gPIN, LOW);
        digitalWrite(rPIN, LOW);
        digitalWrite(yPIN, !digitalRead(yPIN)); // Nh·∫•p nh√°y ƒë√®n v√†ng
        return;
    }

    if (!IsReady(lastTimer, 1000))
        return;
    int prevLed = (currentLed + 2) % 3;
    digitalWrite(ledPin[prevLed], LOW);
    digitalWrite(ledPin[currentLed], HIGH);
    currentLed = (currentLed + 1) % 3;
}

// -------------------- Hi·ªÉn th·ªã th·ªùi gian ch·∫°y l√™n Blynk --------------------
void sendUptime()
{
    unsigned long uptime = millis() / 1000;
    Blynk.virtualWrite(V0, uptime);
}

// -------------------- Nh·∫≠n l·ªánh t·ª´ Blynk --------------------
BLYNK_WRITE(V3)
{
    int value = param.asInt();
    yellowBlinkMode = (value == 1);
    if (yellowBlinkMode)
    {
        digitalWrite(gPIN, LOW);
        digitalWrite(rPIN, LOW);
        digitalWrite(yPIN, HIGH);
    }
    else
    {
        digitalWrite(yPIN, LOW);
    }
}

// -------------------- Setup --------------------
void setup()
{
    Serial.begin(115200);
    pinMode(gPIN, OUTPUT);
    pinMode(yPIN, OUTPUT);
    pinMode(rPIN, OUTPUT);

    digitalWrite(gPIN, LOW);
    digitalWrite(yPIN, LOW);
    digitalWrite(rPIN, LOW);

    Wire.begin(OLED_SDA, OLED_SCL);
    oled.begin();
    oled.clearBuffer();

    oled.setFont(u8g2_font_unifont_t_vietnamese1);
    oled.drawUTF8(0, 14, "Welcom to chanel");
    oled.sendBuffer();

    // K·∫øt n·ªëi WiFi v√† Blynk
    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

    // C·∫•u h√¨nh client Telegram
    client.setInsecure(); // B·ªè qua ki·ªÉm tra ch·ª©ng ch·ªâ SSL (d√πng cho ESP8266)

    // Thi·∫øt l·∫≠p timer
    timer.setInterval(2000L, updateData);
    timer.setInterval(1000L, sendUptime);

    startMillis = millis();
}

// -------------------- Loop --------------------
void loop()
{
    Blynk.run();
    timer.run();
    controlTrafficLights();
    handleTelegramMessages(); // G·ªçi h√†m x·ª≠ l√Ω tin nh·∫Øn Telegram
}
